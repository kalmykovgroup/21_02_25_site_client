import {createSlice, PayloadAction} from "@reduxjs/toolkit";
import {fetchAutocompleteSuggestions} from "./searchActions.ts";
import {SEARCH_KEY} from "../constants.ts";

interface searchSliceState{
    query: string;
    history: string[];
    suggestions: string[], // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    loadingSuggestions: boolean,
}


const initialState: searchSliceState  = {
    query: "", // –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    history: [], // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
    suggestions: [], // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
    loadingSuggestions: false,
};

const searchSlice = createSlice({
    name: SEARCH_KEY,
    initialState,
    reducers: {
        setQuery: (state, action: PayloadAction<string>) => {
            state.query = action.payload;
        },
        clearQuery: (state) => {
            state.query = "";
        },

        addToHistory: (state, action: PayloadAction<string>) => {
            const newQuery = action.payload;

            // üîπ –£–¥–∞–ª—è–µ–º `newQuery`, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
            state.history = state.history.filter(query => query !== newQuery);

            // üîπ –î–æ–±–∞–≤–ª—è–µ–º `newQuery` –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
            state.history.unshift(newQuery);

            // üîπ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if (state.history.length > 10) {
                state.history.pop();
            }
        },
        clearHistory: (state) => {
            state.history = [];
        },
        removeHistoryItem: (state, action: PayloadAction<string>) => {
            state.history = state.history.filter(item => item !== action.payload);
        },
    },
    extraReducers: (builder) => {
        builder
            .addCase(fetchAutocompleteSuggestions.pending, (state) => {
                state.loadingSuggestions = true;
            })

            .addCase(fetchAutocompleteSuggestions.fulfilled, (state, action) => {

                state.loadingSuggestions = false;
                state.suggestions = action.payload.suggestions;
            })
            .addCase(fetchAutocompleteSuggestions.rejected, (state) => {

                state.loadingSuggestions = false;
            })
    }
});

export const { setQuery, clearQuery, addToHistory, clearHistory, removeHistoryItem } = searchSlice.actions;
export default searchSlice.reducer;
