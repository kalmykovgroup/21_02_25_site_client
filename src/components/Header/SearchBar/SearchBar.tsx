import {useDispatch, useSelector} from "react-redux";
import styles from "./SearchBar.module.css";
import React, {useEffect, useMemo, useRef, useState} from "react";
import useDebounce from "../../../utils/useDebounce.ts";
import {useNavigate} from "react-router-dom";
import {ROUTES} from "../../../routes/routes.ts";
import {
    fetchAutocompleteSuggestions,
    selectSearchHistory,
    selectSearchQuery,
    selectSearchSuggestions
} from "../../../store/search";
import {addToHistory, removeHistoryItem} from "../../../store/search/searchSlice.ts";


import {AppDispatch, SearchGetParam} from "../../../store/types.ts";

interface SearchBarProps {
    className?: string
}


interface HighlightedSuggestion {
    text: string; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    parts: {     // –†–∞–∑–±–∏—Ç—ã–µ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        value: string;    // –¢–µ–∫—Å—Ç —á–∞—Å—Ç–∏
        highlighted: boolean; // –§–ª–∞–≥ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    }[];
}


const SearchBar : React.FC<SearchBarProps> = ({className}: SearchBarProps) =>  {


    const dispatch = useDispatch<AppDispatch>();
    const query = useSelector(selectSearchQuery);
    const history = useSelector(selectSearchHistory);
    const uploadedSuggestions = useSelector(selectSearchSuggestions);
    const [input, setInput] = useState(query); // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞

    const [focus, setFocus] = useState(false);

    const navigate = useNavigate();

    const [suggestions, setSuggestions] = useState<string[]>(history);

    //–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–∫—É—Å–æ–º search input
    const inputRef = useRef<HTMLInputElement>(null); // ‚úÖ –†–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è input

    // üëá –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
    const [selectedIndex, setSelectedIndex] = useState<number | null>(null);

    //–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ø–∏—Å–æ–∫ (ul), –ø–æ–¥ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π(–∏—Å—Ç–æ—Ä–∏—è, –Ω–∞–∑–≤–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤)
    const filteredSuggestionsRef = useRef<HTMLUListElement | null>(null);

    //–ï—Å–ª–∏ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –∏–Ω–∞—á–µ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    useEffect(() => {
        if(input.trim() !== ''){
            setSuggestions(uploadedSuggestions)
        }else{
            setSuggestions(history)
        }

    }, [uploadedSuggestions, history, input]);

    useEffect(() => { //–ö–æ–≥–¥–∞ –º—ã –ø–æ–∫–∏–¥–∞–µ–º –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —Ç–æ –º—ã –≤—Å–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º.
        setInput(query);
    }, [query]);

    // –î–µ–±–∞—É–Ω—Å–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 300 –º—Å
    const debouncedQuery = useDebounce(input, 300);

    //–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    useEffect(() => {

        if (debouncedQuery.trim() === "") return;

        dispatch(fetchAutocompleteSuggestions(debouncedQuery));

    }, [debouncedQuery, dispatch]);

    //–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏, –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥–∏—Ç—å
    useEffect(() => {
        setSelectedIndex(null);
    }, [input]);

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏, –∫–Ω–æ–ø–∫–∞ –∏ enter
    const handleSubmit = (selectedText? : string) => {

        if(!selectedText && (!input || input.trim() === "")) return;

        inputRef.current?.blur();

        setFocus(false)

        let newQuery: string;

        if(selectedText){
            newQuery = selectedText
            setInput(selectedText)
        }else{
            newQuery = input
        }

        if(newQuery.trim() === query?.trim()){
            console.log("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
            return
        }

        if(newQuery.trim() === ""){
            console.log("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.")
            return;
        }

        dispatch(addToHistory(newQuery));

        navigate(`${ROUTES.SEARCH}?${SearchGetParam.QUERY}=${encodeURIComponent(newQuery)}`);
    };

    //–ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏ –∏ —É–±—Ä–∞–ª–∏ —Ñ–æ–∫—É—Å —Å input, —Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const handlerReset = () => {
        setInput(query)
        setFocus(false)
    }



// –ü–æ–ª–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è RegExp
    const escapeRegExp = (string: string) => {
        return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    };

    const useFilteredSuggestions = (
        suggestions: string[],
        input: string
    ): HighlightedSuggestion[] => {
        return useMemo(() => {
            const query = input.trim();
            if (!query) {
                return suggestions.map(text => ({
                    text,
                    parts: [{ value: text, highlighted: false }]
                }));
            }

            const safeQuery = escapeRegExp(query);
            const regex = new RegExp(`(${safeQuery})`, 'gi');

            return suggestions.map(text => {
                const parts: { value: string; highlighted: boolean }[] = [];
                let lastIndex = 0;
                let match: RegExpExecArray | null;

                while ((match = regex.exec(text)) !== null) {
                    const start = match.index;
                    const end = start + match[0].length;

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    if (start > lastIndex) {
                        parts.push({
                            value: text.slice(lastIndex, start),
                            highlighted: false
                        });
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    parts.push({
                        value: text.slice(start, end),
                        highlighted: true
                    });

                    lastIndex = end;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
                if (lastIndex < text.length) {
                    parts.push({
                        value: text.slice(lastIndex),
                        highlighted: false
                    });
                }

                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
                if (parts.length === 0) {
                    parts.push({ value: text, highlighted: false });
                }

                return { text, parts };
            });
        }, [suggestions, input]);
    };

    const filtered = useFilteredSuggestions(suggestions, input);


    // ‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ —Å–ø–∏—Å–∫—É –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
    const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
        if (event.key === "ArrowDown") {
            event.preventDefault();
            if(filtered.length == 0) return;
            setSelectedIndex((prevIndex) => {
                const nextIndex = prevIndex === null ? 0 : prevIndex + 1;
                if (nextIndex < filtered.length) {
                    scrollToItem(nextIndex);
                    return nextIndex;
                }
                return prevIndex;
            });
        } else if (event.key === "ArrowUp") {
            event.preventDefault();
            if(filtered.length == 0) return;
            setSelectedIndex((prevIndex) => {
                const prev = prevIndex === null ? filtered.length - 1 : prevIndex - 1;
                if(prev == -1){
                    return null
                }

                if (prev >= 0) {
                    scrollToItem(prev);
                    return prev;
                }
                return prevIndex;
            });
        } else if (event.key === "Enter" && selectedIndex !== null) {
            if(filtered.length == 0) return;
            handleSubmit(filtered[selectedIndex].text.replace("\u00A0", " ")); // ‚úÖ –¢–µ–ø–µ—Ä—å `.text` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!
        }else if(event.key === "Enter"){
            handleSubmit()
        }
    };

    // ‚úÖ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    const scrollToItem = (index: number) => {
        if (filteredSuggestionsRef.current) {
            const listItem = filteredSuggestionsRef.current.children[index] as HTMLElement;
            if (listItem) {
                listItem.scrollIntoView({ block: "nearest", behavior: "smooth" });
            }
        }
    };




    return (
        <div className={`${styles.searchWrapper} ${className}`}>
            {/* –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ */}
            {focus && <div className={styles.overlay} onClick={() => handlerReset()}/>}


            {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π */}
            <div className={styles.inputContainer}>
                <input
                    ref={inputRef}
                    type="text"
                    className={styles.searchInput}
                    placeholder="–ü–æ–∏—Å–∫..."
                    value={input}
                    onKeyDown={handleKeyDown}
                    onFocus={() => setFocus(true)}
                    onChange={(e) =>  setInput(e.target.value)}
                />
                <button className={styles.clearSearch} onClick={() =>  setInput("")}>
                    <svg className={styles.clearSearchIcon} width="24" height="24" viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path d="M4 4L20 20M20 4L4 20" strokeWidth="1.5" strokeLinecap="round"/>
                    </svg>
                </button>

                <button className={styles.searchButton} onClick={() => handleSubmit()}>
                    –ù–∞–π—Ç–∏
                </button>
            </div>

            {focus && filtered.length > 0 && (

                <ul className={styles.historyList} ref={filteredSuggestionsRef}>
                    {filtered.map((item, index) => (
                        <li key={item.text}
                            className={`${styles.historyItem} ${ selectedIndex === index ? styles.selected : "" }`}
                        >
                            <div
                                className={styles.name}
                                onClick={() => handleSubmit(item.text)}
                                role="button"
                                tabIndex={0}
                            >
                                {item.parts.map((part, partIndex) => (
                                    part.highlighted
                                        ?
                                        <span key={`${item.text}-${partIndex}`} className={styles.highlight} >
                                        {part.value.replace(" ", "\u00A0")}
                                      </span>
                                        :
                                        <span key={`${item.text}-${partIndex}`}>
                                          {part.value.replace(" ", "\u00A0")}
                                      </span>

                                ))}
                            </div>
                            {input.trim().length == 0 && (
                                <button
                                    className={styles.removeButton}
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        dispatch(removeHistoryItem(item.text));
                                    }}
                                    aria-label="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"
                                >
                                    <svg
                                        className={styles.removeIcon}
                                        width="20"
                                        height="20"
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                    >
                                        <path
                                            d="M4 4L20 20M20 4L4 20"
                                            stroke="currentColor"
                                            strokeWidth="1.5"
                                            strokeLinecap="round"
                                        />
                                    </svg>
                                </button>
                            )}
                        </li>
                    ))}
                </ul>

            )}


        </div>
    );
}

export default SearchBar;
